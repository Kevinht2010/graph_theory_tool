[{"D:\\Graph Theory Tool\\front\\src\\index.js":"1","D:\\Graph Theory Tool\\front\\src\\App.js":"2","D:\\Graph Theory Tool\\front\\src\\reportWebVitals.js":"3","D:\\Graph Theory Tool\\front\\src\\logic\\graph\\Graph.js":"4","D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\Planarity.js":"5","D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\Hamiltonian.js":"6","D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\SpanTrees.js":"7","D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\Cycles.js":"8","D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\Components.js":"9","D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\BFS.js":"10"},{"size":500,"mtime":1608943103064,"results":"11","hashOfConfig":"12"},{"size":665,"mtime":1608976692287,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1608943103064,"results":"14","hashOfConfig":"12"},{"size":2289,"mtime":1608976232323,"results":"15","hashOfConfig":"12"},{"size":107,"mtime":1608957101461,"results":"16","hashOfConfig":"12"},{"size":295,"mtime":1608961678554,"results":"17","hashOfConfig":"12"},{"size":106,"mtime":1608957102494,"results":"18","hashOfConfig":"12"},{"size":309,"mtime":1608975639536,"results":"19","hashOfConfig":"12"},{"size":1286,"mtime":1608976681385,"results":"20","hashOfConfig":"12"},{"size":3127,"mtime":1608976595831,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"cgvn3b",{"filePath":"25","messages":"26","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Graph Theory Tool\\front\\src\\index.js",[],["44","45"],"D:\\Graph Theory Tool\\front\\src\\App.js",["46","47","48","49"],"D:\\Graph Theory Tool\\front\\src\\reportWebVitals.js",[],"D:\\Graph Theory Tool\\front\\src\\logic\\graph\\Graph.js",["50","51","52","53","54"],"import Cycles from '../algorithms/Cycles'\r\nimport Hamiltonian from '../algorithms/Hamiltonian'\r\nimport Planarity from '../algorithms/Planarity'\r\nimport SpanTrees from '../algorithms/SpanTrees'\r\nimport Components from '../algorithms/Components'\r\n\r\n\r\nclass Graph {\r\n    constructor(adjMatrix) {\r\n        this.list = this.makeAdjacenyList(adjMatrix);\r\n        this.matrix = adjMatrix;\r\n    }\r\n\r\n    makeAdjacenyList = (m) => {\r\n        let list = [];\r\n        for(let v = 0; v < m.length; ++v) {\r\n            let current = [];\r\n            for(let i = 0; i < m.length; ++i) {\r\n                if(m[v][i] == 1) {\r\n                    current.push(i);\r\n                }\r\n            }\r\n\r\n            list.push(current);\r\n        }\r\n\r\n        return list;\r\n    }\r\n\r\n    getRequirement = (requirement) => {\r\n        if(requirement == \"components\") {\r\n            this.getComponents();\r\n        }\r\n    }\r\n\r\n    // returns the number of components in G;\r\n    getComponents = () => {\r\n        const components = Components(this);\r\n        this.compenents = components.getComponents();\r\n    }\r\n\r\n    // returns all hamiltonian cycles in G;\r\n    getHamiltonianCycles = () => {\r\n        const hamiltonian = Hamiltonian(this);\r\n        this.hamiltonianCycleCount = hamiltonian.getHamiltonianCycleCount();\r\n        this.hamiltonianCycles = hamiltonian.getHamiltonianCycles();\r\n    }\r\n    \r\n\r\n}\r\n\r\nexport default Graph;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* // returns an array of graphs (which are subgraphs of G which happen to be spanning trees/forests)\r\n    spanTrees = () => {\r\n        const trees = SpanTrees.getTrees(this);\r\n        return trees;\r\n    }\r\n\r\n    // returns the number of spanning trees\r\n    numberOfSpanTrees = () => {\r\n        const treeCount = SpanTrees.getTreeCount(this);\r\n        return treeCount;\r\n    }\r\n\r\n    // returns a boolean as to whether or not this graph is planar\r\n    planarity = () => {\r\n        let b = Planarity.getPlanarity(this);\r\n        return b;\r\n    }\r\n\r\n    // returns a K_(3,3) or K_5 subdivision\r\n    nonPlanar = () => {\r\n        let b = Planarity.getSubdivision(this);\r\n        return b;\r\n    }\r\n\r\n    // returns smallest + largest cycle in G (array of Graphs);\r\n    cycles = () => {\r\n        const cycleArray = Cycles.getCycles(this);\r\n        return cycleArray;\r\n    }\r\n*/","D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\Planarity.js",[],"D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\Hamiltonian.js",[],"D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\SpanTrees.js",[],"D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\Cycles.js",[],"D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\Components.js",[],"D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\BFS.js",["55","56","57"],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":1,"column":8,"nodeType":"64","messageId":"65","endLine":1,"endColumn":12},{"ruleId":"62","severity":1,"message":"66","line":4,"column":21,"nodeType":"64","messageId":"65","endLine":4,"endColumn":29},{"ruleId":"62","severity":1,"message":"67","line":5,"column":20,"nodeType":"64","messageId":"65","endLine":5,"endColumn":31},{"ruleId":"62","severity":1,"message":"68","line":5,"column":33,"nodeType":"64","messageId":"65","endLine":5,"endColumn":42},{"ruleId":"62","severity":1,"message":"69","line":1,"column":8,"nodeType":"64","messageId":"65","endLine":1,"endColumn":14},{"ruleId":"62","severity":1,"message":"70","line":3,"column":8,"nodeType":"64","messageId":"65","endLine":3,"endColumn":17},{"ruleId":"62","severity":1,"message":"71","line":4,"column":8,"nodeType":"64","messageId":"65","endLine":4,"endColumn":17},{"ruleId":"72","severity":1,"message":"73","line":19,"column":28,"nodeType":"74","messageId":"75","endLine":19,"endColumn":30},{"ruleId":"72","severity":1,"message":"73","line":31,"column":24,"nodeType":"74","messageId":"75","endLine":31,"endColumn":26},{"ruleId":"72","severity":1,"message":"73","line":22,"column":27,"nodeType":"74","messageId":"75","endLine":22,"endColumn":29},{"ruleId":"72","severity":1,"message":"73","line":58,"column":27,"nodeType":"74","messageId":"75","endLine":58,"endColumn":29},{"ruleId":"72","severity":1,"message":"73","line":95,"column":42,"nodeType":"74","messageId":"75","endLine":95,"endColumn":44},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'BFSNoRepeat' is defined but never used.","'BFSRepeat' is defined but never used.","'Cycles' is defined but never used.","'Planarity' is defined but never used.","'SpanTrees' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]