[{"D:\\Graph Theory Tool\\front\\src\\index.js":"1","D:\\Graph Theory Tool\\front\\src\\App.js":"2","D:\\Graph Theory Tool\\front\\src\\reportWebVitals.js":"3","D:\\Graph Theory Tool\\front\\src\\logic\\graph\\Graph.js":"4","D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\Planarity.js":"5","D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\Hamiltonian.js":"6","D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\SpanTrees.js":"7","D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\Cycles.js":"8","D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\Components.js":"9","D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\BFS.js":"10","D:\\Graph Theory Tool\\front\\src\\display\\graphs\\GraphVisual.js":"11","D:\\Graph Theory Tool\\front\\src\\display\\graphs\\Edge.js":"12","D:\\Graph Theory Tool\\front\\src\\display\\graphs\\Node.js":"13","D:\\Graph Theory Tool\\front\\src\\display\\data\\Data.js":"14","D:\\Graph Theory Tool\\front\\src\\display\\input\\Inputs.js":"15","D:\\Graph Theory Tool\\front\\src\\display\\input\\InputGraph.js":"16","D:\\Graph Theory Tool\\front\\src\\display\\authentication\\Authentication.js":"17"},{"size":500,"mtime":1608943103064,"results":"18","hashOfConfig":"19"},{"size":805,"mtime":1610174793210,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":1608943103064,"results":"21","hashOfConfig":"19"},{"size":2400,"mtime":1609225751772,"results":"22","hashOfConfig":"19"},{"size":107,"mtime":1608957101461,"results":"23","hashOfConfig":"19"},{"size":295,"mtime":1608961678554,"results":"24","hashOfConfig":"19"},{"size":106,"mtime":1608957102494,"results":"25","hashOfConfig":"19"},{"size":466,"mtime":1609028646681,"results":"26","hashOfConfig":"19"},{"size":1282,"mtime":1609225152031,"results":"27","hashOfConfig":"19"},{"size":3215,"mtime":1608979201557,"results":"28","hashOfConfig":"19"},{"size":3804,"mtime":1610174785645,"results":"29","hashOfConfig":"19"},{"size":1996,"mtime":1609985865712,"results":"30","hashOfConfig":"19"},{"size":739,"mtime":1609330868472,"results":"31","hashOfConfig":"19"},{"size":7933,"mtime":1610083362065,"results":"32","hashOfConfig":"19"},{"size":12687,"mtime":1610174766742,"results":"33","hashOfConfig":"19"},{"size":1850,"mtime":1610094467255,"results":"34","hashOfConfig":"19"},{"size":1160,"mtime":1610176113867,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"cgvn3b",{"filePath":"39","messages":"40","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"73","usedDeprecatedRules":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Graph Theory Tool\\front\\src\\index.js",[],["76","77"],"D:\\Graph Theory Tool\\front\\src\\App.js",["78","79","80","81","82","83"],"D:\\Graph Theory Tool\\front\\src\\reportWebVitals.js",[],"D:\\Graph Theory Tool\\front\\src\\logic\\graph\\Graph.js",["84","85","86","87","88"],"import Cycles from '../algorithms/Cycles'\r\nimport Hamiltonian from '../algorithms/Hamiltonian'\r\nimport Planarity from '../algorithms/Planarity'\r\nimport SpanTrees from '../algorithms/SpanTrees'\r\nimport Components from '../algorithms/Components'\r\n\r\n\r\nclass Graph {\r\n    constructor(adjMatrix) {\r\n        this.list = this.makeAdjacenyList(adjMatrix);\r\n        this.matrix = adjMatrix;\r\n    }\r\n\r\n    makeAdjacenyList = (m) => {\r\n        let list = [];\r\n        for(let v = 0; v < m.length; ++v) {\r\n            let current = [];\r\n            for(let i = 0; i < m.length; ++i) {\r\n                if(m[v][i] == 1) {\r\n                    current.push(i);\r\n                }\r\n            }\r\n\r\n            list.push(current);\r\n        }\r\n\r\n        return list;\r\n    }\r\n\r\n    getCompleteSubgraph(vertices) {\r\n        \r\n    }\r\n\r\n    getSubgraph(vertices, adjacencyList) {\r\n\r\n    }\r\n\r\n    getRequirement = (requirement) => {\r\n        if(requirement == \"components\") {\r\n            this.getComponents();\r\n        }\r\n    }\r\n\r\n    // returns the number of components in G;\r\n    getComponents = () => {\r\n        const components = Components(this);\r\n        this.compenents = components.getComponents();\r\n    }\r\n\r\n    // returns all hamiltonian cycles in G;\r\n    getHamiltonianCycles = () => {\r\n        const hamiltonian = Hamiltonian(this);\r\n        this.hamiltonianCycleCount = hamiltonian.getHamiltonianCycleCount();\r\n        this.hamiltonianCycles = hamiltonian.getHamiltonianCycles();\r\n    }\r\n    \r\n\r\n}\r\n\r\nexport default Graph;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* // returns an array of graphs (which are subgraphs of G which happen to be spanning trees/forests)\r\n    spanTrees = () => {\r\n        const trees = SpanTrees.getTrees(this);\r\n        return trees;\r\n    }\r\n\r\n    // returns the number of spanning trees\r\n    numberOfSpanTrees = () => {\r\n        const treeCount = SpanTrees.getTreeCount(this);\r\n        return treeCount;\r\n    }\r\n\r\n    // returns a boolean as to whether or not this graph is planar\r\n    planarity = () => {\r\n        let b = Planarity.getPlanarity(this);\r\n        return b;\r\n    }\r\n\r\n    // returns a K_(3,3) or K_5 subdivision\r\n    nonPlanar = () => {\r\n        let b = Planarity.getSubdivision(this);\r\n        return b;\r\n    }\r\n\r\n    // returns smallest + largest cycle in G (array of Graphs);\r\n    cycles = () => {\r\n        const cycleArray = Cycles.getCycles(this);\r\n        return cycleArray;\r\n    }\r\n*/","D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\Planarity.js",[],"D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\Hamiltonian.js",[],"D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\SpanTrees.js",[],"D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\Cycles.js",[],"D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\Components.js",[],"D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\BFS.js",["89","90","91"],"// returns an array of all the paths branching from one vertex\r\nfunction BFSRepeat(G, vertex) {\r\n    let paths = [[vertex]];\r\n    let finishedPaths = [];\r\n    let list = G.list;\r\n\r\n    while(paths.length > 0) {\r\n        let newPaths = [];\r\n        for(let i = 0; i < paths.length; ++i) {\r\n            let path = paths[i];\r\n            let prevLength = newPaths.length;\r\n            let idx = path[path.length - 1];\r\n            for(let v of list[idx]) {\r\n                if(!path.includes(v)) {\r\n                    let newPath = path.slice(0);\r\n                    newPath.push(v);\r\n                    newPaths.push(newPath);\r\n                }\r\n            }\r\n\r\n            if(prevLength == newPaths.length) {\r\n                finishedPaths.push(path);\r\n                paths.splice(i, 1);\r\n                --i;\r\n            }\r\n        }\r\n        paths = newPaths;\r\n    }\r\n    return finishedPaths;\r\n}\r\n\r\nfunction BFSCycle(G, vertex) {\r\n    let paths = [[vertex]];\r\n    let finishedPaths = [];\r\n    let list = G.list;\r\n\r\n    while(paths.length > 0) {\r\n        let newPaths = [];\r\n        for(let i = 0; i < paths.length; ++i) {\r\n            let path = paths[i];\r\n            let prevLength = newPaths.length;\r\n            let idx = path[path.length - 1];\r\n            for(let v of list[idx]) {\r\n                if(!path.includes(v)) {\r\n                    let newPath = path.slice(0);\r\n                    newPath.push(v);\r\n                    newPaths.push(newPath);\r\n                }\r\n\r\n                if(v === vertex && path.length > 2) {\r\n                    let newPath = path.slice(0);\r\n                    newPath.push(v);\r\n                    finishedPaths.push(newPath);\r\n                }\r\n            }\r\n\r\n            if(prevLength == newPaths.length) {\r\n                paths.splice(i, 1);\r\n                --i;\r\n            }\r\n        }\r\n        paths = newPaths;\r\n    }\r\n    \r\n    for(let path of finishedPaths) {\r\n        if(path[1] > path[path.length - 2]) {\r\n            path.reverse();\r\n        }\r\n    }\r\n\r\n    let finishedCycles = Array.from(new Set(finishedPaths.map(JSON.stringify)), JSON.parse);\r\n\r\n    return finishedCycles;\r\n}\r\n\r\n// input: G is the graph, vertex is the starting vertex, and removedVertices\r\n// is an array consisting of the vertices currently in your search already\r\n// (array of 1's and 0's, 1 meaning the vertex is included, 0 meaning not included)\r\n\r\n// returns two arrays: One with all the vertices you can reach in the bfs, \r\n// and one with all the vertices you cannot reach using bfs\r\n\r\nfunction BFSNoRepeat(G, vertex, vertices) {\r\n    let list = G.list;\r\n    let currentVertices = [vertex];\r\n    let vertexMap = vertices;\r\n\r\n    vertexMap[vertex] = 1;\r\n\r\n    while(currentVertices.length > 0) {\r\n        let newVertices = [];\r\n        for(let v of currentVertices) {\r\n            for(let i = 0; i < list[v].length; ++i) {\r\n                if(vertexMap[list[v][i]] != 1) {\r\n                    ++vertexMap[list[v][i]];\r\n                    newVertices.push(list[v][i]);\r\n                }\r\n            }\r\n        }\r\n        \r\n        currentVertices = newVertices.slice(0);\r\n    }\r\n    \r\n    return vertexMap;\r\n}\r\n\r\nexport {BFSRepeat, BFSNoRepeat, BFSCycle};\r\n\r\n","D:\\Graph Theory Tool\\front\\src\\display\\graphs\\GraphVisual.js",["92"],"D:\\Graph Theory Tool\\front\\src\\display\\graphs\\Edge.js",["93"],"import React, {useState, useEffect} from 'react'\r\n\r\nfunction Edge(props) {\r\n    const [node1, setNode1] = useState(props.node1);\r\n    const [node2, setNode2] = useState(props.node2);\r\n    const [bendPos, setBendPos] = useState(props.bendPos);\r\n\r\n    let c;\r\n    let d;\r\n    if(props.bendPos.bent === false) {\r\n        c = [(node1.posX + node2.posX)/2, (node1.posY + node2.posY)/2];\r\n        d = \"M \" + node1.posX + \" \" + node1.posY + \" Q \" + c[0] + \" \" + c[1] + \" \" + node2.posX + \" \" + node2.posY;\r\n    } else {\r\n        c = [props.bendPos.posX, props.bendPos.posY];\r\n        d = calcCirclePath([[node2.posX, node2.posY], c, [node1.posX, node1.posY]]);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setNode1(props.node1); setNode2(props.node2);\r\n        setBendPos(props.bendPos);\r\n    }, [props.node1, props.node2, props.bendPos])\r\n\r\n    return (\r\n        <svg>\r\n            <svg>\r\n                <circle onMouseDown={(e) => {props.dragStart(e, props.id, false);}} onMouseUp={(e) => props.dragEnd(e)} cx={c[0]} cy={c[1]} r={6}/>\r\n            </svg>\r\n            <svg>\r\n                <path pointer-events=\"none\" d={d} stroke=\"black\" fill=\"transparent\" stroke-width=\"3\" shape-rendering=\"geometricPrecision\"/>\r\n            </svg>\r\n        </svg>\r\n    )\r\n}\r\n\r\nfunction calcCirclePath(points){\r\n    var a = points[0]\r\n    var b = points[2]\r\n    var c = points[1]\r\n  \r\n    var A = dist(b, c)\r\n    var B = dist(c, a)\r\n    var C = dist(a, b)\r\n  \r\n    var angle = Math.acos((A*A + B*B - C*C)/(2*A*B))\r\n  \r\n    //calc radius of circle\r\n    var K = .5*A*B*Math.sin(angle)\r\n    var r = A*B*C/4/K\r\n    r = Math.round(r*1000)/1000\r\n  \r\n    //large arc flag\r\n    var laf = +(Math.PI/2 > angle)\r\n  \r\n    //sweep flag\r\n    var saf = +((b[0] - a[0])*(c[1] - a[1]) - (b[1] - a[1])*(c[0] - a[0]) < 0) \r\n  \r\n    return ['M', a, 'A', r, r, 0, laf, saf, b].join(' ')\r\n  }\r\n  \r\n  function dist(a, b){\r\n    return Math.sqrt(\r\n      Math.pow(a[0] - b[0], 2) +\r\n      Math.pow(a[1] - b[1], 2))\r\n  }\r\n\r\nexport default Edge\r\n","D:\\Graph Theory Tool\\front\\src\\display\\graphs\\Node.js",["94"],"import React, {useState, useEffect, useRef} from 'react'\r\n\r\nexport default function Node(props) {\r\n    const [position, setPosition] = useState(props.position);\r\n    \r\n    const labelX = position[0];\r\n    const labelY = position[1];\r\n\r\n    useEffect(() => {\r\n        setPosition(props.position);\r\n    }, [props.position])\r\n\r\n    return (\r\n        <g style={{userSelect:\"none\"}} onMouseDown={e => props.dragStart(e, props.id, true)} onMouseUp={(e) => props.dragEnd(e)}>\r\n            <circle cx={labelX} cy={labelY} r=\"40\" stroke=\"#2ab863\" stroke-width=\"4\" fill=\"#ccffcf\"/>\r\n            <text pointerEvents={\"none\"} textAnchor=\"middle\" transform={`translate(${labelX}, ${labelY + 5})`} fontSize=\"20\">{props.id}</text>\r\n        </g>\r\n    )\r\n}","D:\\Graph Theory Tool\\front\\src\\display\\data\\Data.js",[],"D:\\Graph Theory Tool\\front\\src\\display\\input\\Inputs.js",["95","96","97","98","99","100","101","102"],"D:\\Graph Theory Tool\\front\\src\\display\\input\\InputGraph.js",["103","104","105"],"export default class InputGraph {\r\n    constructor(vertices, edges) {\r\n        console.log(edges);\r\n        this.vertices = [];\r\n        for(let i = 0; i < vertices; ++i) {\r\n            this.vertices.push({\"id\": i, \"posX\": 500, \"posY\": 500});\r\n        }\r\n\r\n        this.edges = new Map;\r\n        this.bendPositions = new Map;\r\n        this.valid = true;\r\n        this.errors = [];\r\n        for(let i = 0; i < edges.length; ++i) {\r\n            this.errors.push(\"none\");\r\n            for(let neighbor of edges[i]) {\r\n                if(!this.addEdge(i, neighbor)) {\r\n                    this.valid = false;\r\n                    this.errors[i] = (\"error\");\r\n                    break;\r\n                } else if (neighbor === \"\") {\r\n                    this.errors[i] = (\"error\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    addEdge = (v1, v2) => {\r\n        if(!(/^\\d+$/.test(v1)) || !(/^\\d+$/.test(v2))) {\r\n            return false;\r\n        }\r\n\r\n        v1 = Number(v1);\r\n        v2 = Number(v2);\r\n        if(!(Number.isInteger(v1)) || v1 > this.vertices.length - 1) {\r\n            return false;\r\n        }\r\n        if(!(Number.isInteger(v2)) || v2 > this.vertices.length - 1) {\r\n            return false;\r\n        }\r\n\r\n        if(v1 == v2) {\r\n            return false;\r\n        }\r\n        \r\n        let key;\r\n        if(v1 > v2) {\r\n            key = v2 + \".\" + v1;\r\n        } else {\r\n            key = v1 + \".\" + v2;\r\n        }\r\n        \r\n        this.edges.set(key, {\r\n            \"id\": key,\r\n            \"node1\": v1,\r\n            \"node2\": v2,\r\n            \"bent\": false,\r\n            \"posX\": null,\r\n            \"posY\": null\r\n        });\r\n\r\n\r\n        this.bendPositions.set(key, {\r\n            \"id\": key,\r\n            \"bent\": false,\r\n            \"posX\": null,\r\n            \"posY\": null\r\n        });\r\n\r\n        return true;\r\n    }\r\n\r\n}","D:\\Graph Theory Tool\\front\\src\\display\\authentication\\Authentication.js",["106"],{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","severity":1,"message":"112","line":1,"column":8,"nodeType":"113","messageId":"114","endLine":1,"endColumn":12},{"ruleId":"111","severity":1,"message":"115","line":5,"column":8,"nodeType":"113","messageId":"114","endLine":5,"endColumn":19},{"ruleId":"111","severity":1,"message":"116","line":6,"column":21,"nodeType":"113","messageId":"114","endLine":6,"endColumn":29},{"ruleId":"111","severity":1,"message":"117","line":7,"column":20,"nodeType":"113","messageId":"114","endLine":7,"endColumn":31},{"ruleId":"111","severity":1,"message":"118","line":7,"column":33,"nodeType":"113","messageId":"114","endLine":7,"endColumn":42},{"ruleId":"111","severity":1,"message":"119","line":16,"column":9,"nodeType":"113","messageId":"114","endLine":16,"endColumn":17},{"ruleId":"111","severity":1,"message":"120","line":1,"column":8,"nodeType":"113","messageId":"114","endLine":1,"endColumn":14},{"ruleId":"111","severity":1,"message":"121","line":3,"column":8,"nodeType":"113","messageId":"114","endLine":3,"endColumn":17},{"ruleId":"111","severity":1,"message":"122","line":4,"column":8,"nodeType":"113","messageId":"114","endLine":4,"endColumn":17},{"ruleId":"123","severity":1,"message":"124","line":19,"column":28,"nodeType":"125","messageId":"126","endLine":19,"endColumn":30},{"ruleId":"123","severity":1,"message":"124","line":39,"column":24,"nodeType":"125","messageId":"126","endLine":39,"endColumn":26},{"ruleId":"123","severity":1,"message":"124","line":21,"column":27,"nodeType":"125","messageId":"126","endLine":21,"endColumn":29},{"ruleId":"123","severity":1,"message":"124","line":57,"column":27,"nodeType":"125","messageId":"126","endLine":57,"endColumn":29},{"ruleId":"123","severity":1,"message":"127","line":94,"column":42,"nodeType":"125","messageId":"126","endLine":94,"endColumn":44},{"ruleId":"111","severity":1,"message":"128","line":1,"column":37,"nodeType":"113","messageId":"114","endLine":1,"endColumn":43},{"ruleId":"111","severity":1,"message":"129","line":6,"column":12,"nodeType":"113","messageId":"114","endLine":6,"endColumn":19},{"ruleId":"111","severity":1,"message":"128","line":1,"column":37,"nodeType":"113","messageId":"114","endLine":1,"endColumn":43},{"ruleId":"111","severity":1,"message":"130","line":1,"column":26,"nodeType":"113","messageId":"114","endLine":1,"endColumn":35},{"ruleId":"111","severity":1,"message":"131","line":8,"column":12,"nodeType":"113","messageId":"114","endLine":8,"endColumn":32},{"ruleId":"111","severity":1,"message":"132","line":8,"column":34,"nodeType":"113","messageId":"114","endLine":8,"endColumn":57},{"ruleId":"111","severity":1,"message":"133","line":11,"column":12,"nodeType":"113","messageId":"114","endLine":11,"endColumn":26},{"ruleId":"111","severity":1,"message":"134","line":11,"column":28,"nodeType":"113","messageId":"114","endLine":11,"endColumn":45},{"ruleId":"111","severity":1,"message":"135","line":14,"column":12,"nodeType":"113","messageId":"114","endLine":14,"endColumn":22},{"ruleId":"111","severity":1,"message":"136","line":17,"column":12,"nodeType":"113","messageId":"114","endLine":17,"endColumn":24},{"ruleId":"111","severity":1,"message":"137","line":17,"column":26,"nodeType":"113","messageId":"114","endLine":17,"endColumn":41},{"ruleId":"138","severity":1,"message":"139","line":9,"column":22,"nodeType":"140","messageId":"141","endLine":9,"endColumn":29,"fix":"142"},{"ruleId":"138","severity":1,"message":"139","line":10,"column":30,"nodeType":"140","messageId":"141","endLine":10,"endColumn":37,"fix":"143"},{"ruleId":"123","severity":1,"message":"124","line":41,"column":15,"nodeType":"125","messageId":"126","endLine":41,"endColumn":17},{"ruleId":"111","severity":1,"message":"144","line":3,"column":24,"nodeType":"113","messageId":"114","endLine":3,"endColumn":37},"no-native-reassign",["145"],"no-negated-in-lhs",["146"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'GraphVisual' is defined but never used.","'useState' is defined but never used.","'BFSNoRepeat' is defined but never used.","'BFSRepeat' is defined but never used.","'vertices' is assigned a value but never used.","'Cycles' is defined but never used.","'Planarity' is defined but never used.","'SpanTrees' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'useRef' is defined but never used.","'bendPos' is assigned a value but never used.","'useEffect' is defined but never used.","'isUpdatingProperties' is assigned a value but never used.","'setIsUpdatingProperties' is assigned a value but never used.","'prevProperties' is assigned a value but never used.","'setPrevProperties' is assigned a value but never used.","'deleteEdge' is assigned a value but never used.","'graphOptions' is assigned a value but never used.","'setGraphOptions' is assigned a value but never used.","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"147","text":"148"},{"range":"149","text":"148"},"'setSubmitBool' is assigned a value but never used.","no-global-assign","no-unsafe-negation",[285,285],"()",[324,324]]