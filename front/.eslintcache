[{"D:\\Graph Theory Tool\\front\\src\\index.js":"1","D:\\Graph Theory Tool\\front\\src\\App.js":"2","D:\\Graph Theory Tool\\front\\src\\reportWebVitals.js":"3","D:\\Graph Theory Tool\\front\\src\\logic\\graph\\Graph.js":"4","D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\Planarity.js":"5","D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\Hamiltonian.js":"6","D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\SpanTrees.js":"7","D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\Cycles.js":"8","D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\Components.js":"9","D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\BFS.js":"10","D:\\Graph Theory Tool\\front\\src\\display\\graphs\\GraphVisual.js":"11","D:\\Graph Theory Tool\\front\\src\\display\\graphs\\Edge.js":"12","D:\\Graph Theory Tool\\front\\src\\display\\graphs\\Node.js":"13"},{"size":500,"mtime":1608943103064,"results":"14","hashOfConfig":"15"},{"size":1130,"mtime":1609228197563,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1608943103064,"results":"17","hashOfConfig":"15"},{"size":2400,"mtime":1609225751772,"results":"18","hashOfConfig":"15"},{"size":107,"mtime":1608957101461,"results":"19","hashOfConfig":"15"},{"size":295,"mtime":1608961678554,"results":"20","hashOfConfig":"15"},{"size":106,"mtime":1608957102494,"results":"21","hashOfConfig":"15"},{"size":466,"mtime":1609028646681,"results":"22","hashOfConfig":"15"},{"size":1282,"mtime":1609225152031,"results":"23","hashOfConfig":"15"},{"size":3215,"mtime":1608979201557,"results":"24","hashOfConfig":"15"},{"size":3693,"mtime":1609228139963,"results":"25","hashOfConfig":"15"},{"size":1721,"mtime":1609228153163,"results":"26","hashOfConfig":"15"},{"size":753,"mtime":1609228162452,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"cgvn3b",{"filePath":"31","messages":"32","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Graph Theory Tool\\front\\src\\index.js",[],["56","57"],"D:\\Graph Theory Tool\\front\\src\\App.js",["58","59","60","61"],"D:\\Graph Theory Tool\\front\\src\\reportWebVitals.js",[],"D:\\Graph Theory Tool\\front\\src\\logic\\graph\\Graph.js",["62","63","64","65","66"],"D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\Planarity.js",[],"D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\Hamiltonian.js",[],"D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\SpanTrees.js",[],"D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\Cycles.js",[],"D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\Components.js",[],"D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\BFS.js",["67","68","69"],"// returns an array of all the paths branching from one vertex\r\nfunction BFSRepeat(G, vertex) {\r\n    let paths = [[vertex]];\r\n    let finishedPaths = [];\r\n    let list = G.list;\r\n\r\n    while(paths.length > 0) {\r\n        let newPaths = [];\r\n        for(let i = 0; i < paths.length; ++i) {\r\n            let path = paths[i];\r\n            let prevLength = newPaths.length;\r\n            let idx = path[path.length - 1];\r\n            for(let v of list[idx]) {\r\n                if(!path.includes(v)) {\r\n                    let newPath = path.slice(0);\r\n                    newPath.push(v);\r\n                    newPaths.push(newPath);\r\n                }\r\n            }\r\n\r\n            if(prevLength == newPaths.length) {\r\n                finishedPaths.push(path);\r\n                paths.splice(i, 1);\r\n                --i;\r\n            }\r\n        }\r\n        paths = newPaths;\r\n    }\r\n    return finishedPaths;\r\n}\r\n\r\nfunction BFSCycle(G, vertex) {\r\n    let paths = [[vertex]];\r\n    let finishedPaths = [];\r\n    let list = G.list;\r\n\r\n    while(paths.length > 0) {\r\n        let newPaths = [];\r\n        for(let i = 0; i < paths.length; ++i) {\r\n            let path = paths[i];\r\n            let prevLength = newPaths.length;\r\n            let idx = path[path.length - 1];\r\n            for(let v of list[idx]) {\r\n                if(!path.includes(v)) {\r\n                    let newPath = path.slice(0);\r\n                    newPath.push(v);\r\n                    newPaths.push(newPath);\r\n                }\r\n\r\n                if(v === vertex && path.length > 2) {\r\n                    let newPath = path.slice(0);\r\n                    newPath.push(v);\r\n                    finishedPaths.push(newPath);\r\n                }\r\n            }\r\n\r\n            if(prevLength == newPaths.length) {\r\n                paths.splice(i, 1);\r\n                --i;\r\n            }\r\n        }\r\n        paths = newPaths;\r\n    }\r\n    \r\n    for(let path of finishedPaths) {\r\n        if(path[1] > path[path.length - 2]) {\r\n            path.reverse();\r\n        }\r\n    }\r\n\r\n    let finishedCycles = Array.from(new Set(finishedPaths.map(JSON.stringify)), JSON.parse);\r\n\r\n    return finishedCycles;\r\n}\r\n\r\n// input: G is the graph, vertex is the starting vertex, and removedVertices\r\n// is an array consisting of the vertices currently in your search already\r\n// (array of 1's and 0's, 1 meaning the vertex is included, 0 meaning not included)\r\n\r\n// returns two arrays: One with all the vertices you can reach in the bfs, \r\n// and one with all the vertices you cannot reach using bfs\r\n\r\nfunction BFSNoRepeat(G, vertex, vertices) {\r\n    let list = G.list;\r\n    let currentVertices = [vertex];\r\n    let vertexMap = vertices;\r\n\r\n    vertexMap[vertex] = 1;\r\n\r\n    while(currentVertices.length > 0) {\r\n        let newVertices = [];\r\n        for(let v of currentVertices) {\r\n            for(let i = 0; i < list[v].length; ++i) {\r\n                if(vertexMap[list[v][i]] != 1) {\r\n                    ++vertexMap[list[v][i]];\r\n                    newVertices.push(list[v][i]);\r\n                }\r\n            }\r\n        }\r\n        \r\n        currentVertices = newVertices.slice(0);\r\n    }\r\n    \r\n    return vertexMap;\r\n}\r\n\r\nexport {BFSRepeat, BFSNoRepeat, BFSCycle};\r\n\r\n","D:\\Graph Theory Tool\\front\\src\\display\\graphs\\GraphVisual.js",["70","71","72"],"D:\\Graph Theory Tool\\front\\src\\display\\graphs\\Edge.js",["73"],"D:\\Graph Theory Tool\\front\\src\\display\\graphs\\Node.js",["74"],{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":1,"column":8,"nodeType":"81","messageId":"82","endLine":1,"endColumn":12},{"ruleId":"79","severity":1,"message":"83","line":5,"column":21,"nodeType":"81","messageId":"82","endLine":5,"endColumn":29},{"ruleId":"79","severity":1,"message":"84","line":6,"column":20,"nodeType":"81","messageId":"82","endLine":6,"endColumn":31},{"ruleId":"79","severity":1,"message":"85","line":6,"column":33,"nodeType":"81","messageId":"82","endLine":6,"endColumn":42},{"ruleId":"79","severity":1,"message":"86","line":1,"column":8,"nodeType":"81","messageId":"82","endLine":1,"endColumn":14},{"ruleId":"79","severity":1,"message":"87","line":3,"column":8,"nodeType":"81","messageId":"82","endLine":3,"endColumn":17},{"ruleId":"79","severity":1,"message":"88","line":4,"column":8,"nodeType":"81","messageId":"82","endLine":4,"endColumn":17},{"ruleId":"89","severity":1,"message":"90","line":19,"column":28,"nodeType":"91","messageId":"92","endLine":19,"endColumn":30},{"ruleId":"89","severity":1,"message":"90","line":39,"column":24,"nodeType":"91","messageId":"92","endLine":39,"endColumn":26},{"ruleId":"89","severity":1,"message":"90","line":21,"column":27,"nodeType":"91","messageId":"92","endLine":21,"endColumn":29},{"ruleId":"89","severity":1,"message":"90","line":57,"column":27,"nodeType":"91","messageId":"92","endLine":57,"endColumn":29},{"ruleId":"89","severity":1,"message":"93","line":94,"column":42,"nodeType":"91","messageId":"92","endLine":94,"endColumn":44},{"ruleId":"79","severity":1,"message":"94","line":1,"column":37,"nodeType":"81","messageId":"82","endLine":1,"endColumn":43},{"ruleId":"79","severity":1,"message":"95","line":9,"column":19,"nodeType":"81","messageId":"82","endLine":9,"endColumn":27},{"ruleId":"96","severity":1,"message":"97","line":92,"column":38,"nodeType":"98","endLine":92,"endColumn":68,"suggestions":"99"},{"ruleId":"79","severity":1,"message":"100","line":6,"column":12,"nodeType":"81","messageId":"82","endLine":6,"endColumn":19},{"ruleId":"79","severity":1,"message":"94","line":1,"column":37,"nodeType":"81","messageId":"82","endLine":1,"endColumn":43},"no-native-reassign",["101"],"no-negated-in-lhs",["102"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'BFSNoRepeat' is defined but never used.","'BFSRepeat' is defined but never used.","'Cycles' is defined but never used.","'Planarity' is defined but never used.","'SpanTrees' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'useRef' is defined but never used.","'setEdges' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'updatenodes'. Either include it or remove the dependency array.","ArrayExpression",["103"],"'bendPos' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"104","fix":"105"},"Update the dependencies array to be: [data, mouseIn, bendPositions, updatenodes]",{"range":"106","text":"107"},[3261,3291],"[data, mouseIn, bendPositions, updatenodes]"]