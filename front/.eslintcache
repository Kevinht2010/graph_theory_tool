[{"D:\\Graph Theory Tool\\front\\src\\index.js":"1","D:\\Graph Theory Tool\\front\\src\\App.js":"2","D:\\Graph Theory Tool\\front\\src\\reportWebVitals.js":"3","D:\\Graph Theory Tool\\front\\src\\logic\\graph\\Graph.js":"4","D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\Planarity.js":"5","D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\Hamiltonian.js":"6","D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\SpanTrees.js":"7","D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\Cycles.js":"8","D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\Components.js":"9","D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\BFS.js":"10","D:\\Graph Theory Tool\\front\\src\\display\\graphs\\GraphVisual.js":"11","D:\\Graph Theory Tool\\front\\src\\display\\graphs\\Edge.js":"12","D:\\Graph Theory Tool\\front\\src\\display\\graphs\\Node.js":"13","D:\\Graph Theory Tool\\front\\src\\display\\data\\Data.js":"14","D:\\Graph Theory Tool\\front\\src\\display\\input\\Inputs.js":"15"},{"size":500,"mtime":1608943103064,"results":"16","hashOfConfig":"17"},{"size":805,"mtime":1609468872277,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1608943103064,"results":"19","hashOfConfig":"17"},{"size":2400,"mtime":1609225751772,"results":"20","hashOfConfig":"17"},{"size":107,"mtime":1608957101461,"results":"21","hashOfConfig":"17"},{"size":295,"mtime":1608961678554,"results":"22","hashOfConfig":"17"},{"size":106,"mtime":1608957102494,"results":"23","hashOfConfig":"17"},{"size":466,"mtime":1609028646681,"results":"24","hashOfConfig":"17"},{"size":1282,"mtime":1609225152031,"results":"25","hashOfConfig":"17"},{"size":3215,"mtime":1608979201557,"results":"26","hashOfConfig":"17"},{"size":4071,"mtime":1609479712818,"results":"27","hashOfConfig":"17"},{"size":1996,"mtime":1609471627705,"results":"28","hashOfConfig":"17"},{"size":739,"mtime":1609330868472,"results":"29","hashOfConfig":"17"},{"size":5166,"mtime":1609479746692,"results":"30","hashOfConfig":"17"},{"size":7251,"mtime":1609479611579,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"cgvn3b",{"filePath":"35","messages":"36","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Graph Theory Tool\\front\\src\\index.js",[],["65","66"],"D:\\Graph Theory Tool\\front\\src\\App.js",["67","68","69","70","71","72"],"D:\\Graph Theory Tool\\front\\src\\reportWebVitals.js",[],"D:\\Graph Theory Tool\\front\\src\\logic\\graph\\Graph.js",["73","74","75","76","77"],"import Cycles from '../algorithms/Cycles'\r\nimport Hamiltonian from '../algorithms/Hamiltonian'\r\nimport Planarity from '../algorithms/Planarity'\r\nimport SpanTrees from '../algorithms/SpanTrees'\r\nimport Components from '../algorithms/Components'\r\n\r\n\r\nclass Graph {\r\n    constructor(adjMatrix) {\r\n        this.list = this.makeAdjacenyList(adjMatrix);\r\n        this.matrix = adjMatrix;\r\n    }\r\n\r\n    makeAdjacenyList = (m) => {\r\n        let list = [];\r\n        for(let v = 0; v < m.length; ++v) {\r\n            let current = [];\r\n            for(let i = 0; i < m.length; ++i) {\r\n                if(m[v][i] == 1) {\r\n                    current.push(i);\r\n                }\r\n            }\r\n\r\n            list.push(current);\r\n        }\r\n\r\n        return list;\r\n    }\r\n\r\n    getCompleteSubgraph(vertices) {\r\n        \r\n    }\r\n\r\n    getSubgraph(vertices, adjacencyList) {\r\n\r\n    }\r\n\r\n    getRequirement = (requirement) => {\r\n        if(requirement == \"components\") {\r\n            this.getComponents();\r\n        }\r\n    }\r\n\r\n    // returns the number of components in G;\r\n    getComponents = () => {\r\n        const components = Components(this);\r\n        this.compenents = components.getComponents();\r\n    }\r\n\r\n    // returns all hamiltonian cycles in G;\r\n    getHamiltonianCycles = () => {\r\n        const hamiltonian = Hamiltonian(this);\r\n        this.hamiltonianCycleCount = hamiltonian.getHamiltonianCycleCount();\r\n        this.hamiltonianCycles = hamiltonian.getHamiltonianCycles();\r\n    }\r\n    \r\n\r\n}\r\n\r\nexport default Graph;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* // returns an array of graphs (which are subgraphs of G which happen to be spanning trees/forests)\r\n    spanTrees = () => {\r\n        const trees = SpanTrees.getTrees(this);\r\n        return trees;\r\n    }\r\n\r\n    // returns the number of spanning trees\r\n    numberOfSpanTrees = () => {\r\n        const treeCount = SpanTrees.getTreeCount(this);\r\n        return treeCount;\r\n    }\r\n\r\n    // returns a boolean as to whether or not this graph is planar\r\n    planarity = () => {\r\n        let b = Planarity.getPlanarity(this);\r\n        return b;\r\n    }\r\n\r\n    // returns a K_(3,3) or K_5 subdivision\r\n    nonPlanar = () => {\r\n        let b = Planarity.getSubdivision(this);\r\n        return b;\r\n    }\r\n\r\n    // returns smallest + largest cycle in G (array of Graphs);\r\n    cycles = () => {\r\n        const cycleArray = Cycles.getCycles(this);\r\n        return cycleArray;\r\n    }\r\n*/","D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\Planarity.js",[],"D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\Hamiltonian.js",[],"D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\SpanTrees.js",[],"D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\Cycles.js",[],"D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\Components.js",[],"D:\\Graph Theory Tool\\front\\src\\logic\\algorithms\\BFS.js",["78","79","80"],"// returns an array of all the paths branching from one vertex\r\nfunction BFSRepeat(G, vertex) {\r\n    let paths = [[vertex]];\r\n    let finishedPaths = [];\r\n    let list = G.list;\r\n\r\n    while(paths.length > 0) {\r\n        let newPaths = [];\r\n        for(let i = 0; i < paths.length; ++i) {\r\n            let path = paths[i];\r\n            let prevLength = newPaths.length;\r\n            let idx = path[path.length - 1];\r\n            for(let v of list[idx]) {\r\n                if(!path.includes(v)) {\r\n                    let newPath = path.slice(0);\r\n                    newPath.push(v);\r\n                    newPaths.push(newPath);\r\n                }\r\n            }\r\n\r\n            if(prevLength == newPaths.length) {\r\n                finishedPaths.push(path);\r\n                paths.splice(i, 1);\r\n                --i;\r\n            }\r\n        }\r\n        paths = newPaths;\r\n    }\r\n    return finishedPaths;\r\n}\r\n\r\nfunction BFSCycle(G, vertex) {\r\n    let paths = [[vertex]];\r\n    let finishedPaths = [];\r\n    let list = G.list;\r\n\r\n    while(paths.length > 0) {\r\n        let newPaths = [];\r\n        for(let i = 0; i < paths.length; ++i) {\r\n            let path = paths[i];\r\n            let prevLength = newPaths.length;\r\n            let idx = path[path.length - 1];\r\n            for(let v of list[idx]) {\r\n                if(!path.includes(v)) {\r\n                    let newPath = path.slice(0);\r\n                    newPath.push(v);\r\n                    newPaths.push(newPath);\r\n                }\r\n\r\n                if(v === vertex && path.length > 2) {\r\n                    let newPath = path.slice(0);\r\n                    newPath.push(v);\r\n                    finishedPaths.push(newPath);\r\n                }\r\n            }\r\n\r\n            if(prevLength == newPaths.length) {\r\n                paths.splice(i, 1);\r\n                --i;\r\n            }\r\n        }\r\n        paths = newPaths;\r\n    }\r\n    \r\n    for(let path of finishedPaths) {\r\n        if(path[1] > path[path.length - 2]) {\r\n            path.reverse();\r\n        }\r\n    }\r\n\r\n    let finishedCycles = Array.from(new Set(finishedPaths.map(JSON.stringify)), JSON.parse);\r\n\r\n    return finishedCycles;\r\n}\r\n\r\n// input: G is the graph, vertex is the starting vertex, and removedVertices\r\n// is an array consisting of the vertices currently in your search already\r\n// (array of 1's and 0's, 1 meaning the vertex is included, 0 meaning not included)\r\n\r\n// returns two arrays: One with all the vertices you can reach in the bfs, \r\n// and one with all the vertices you cannot reach using bfs\r\n\r\nfunction BFSNoRepeat(G, vertex, vertices) {\r\n    let list = G.list;\r\n    let currentVertices = [vertex];\r\n    let vertexMap = vertices;\r\n\r\n    vertexMap[vertex] = 1;\r\n\r\n    while(currentVertices.length > 0) {\r\n        let newVertices = [];\r\n        for(let v of currentVertices) {\r\n            for(let i = 0; i < list[v].length; ++i) {\r\n                if(vertexMap[list[v][i]] != 1) {\r\n                    ++vertexMap[list[v][i]];\r\n                    newVertices.push(list[v][i]);\r\n                }\r\n            }\r\n        }\r\n        \r\n        currentVertices = newVertices.slice(0);\r\n    }\r\n    \r\n    return vertexMap;\r\n}\r\n\r\nexport {BFSRepeat, BFSNoRepeat, BFSCycle};\r\n\r\n","D:\\Graph Theory Tool\\front\\src\\display\\graphs\\GraphVisual.js",["81","82","83","84","85","86"],"D:\\Graph Theory Tool\\front\\src\\display\\graphs\\Edge.js",["87"],"D:\\Graph Theory Tool\\front\\src\\display\\graphs\\Node.js",["88"],"D:\\Graph Theory Tool\\front\\src\\display\\data\\Data.js",["89"],"D:\\Graph Theory Tool\\front\\src\\display\\input\\Inputs.js",["90","91","92","93","94","95","96"],{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":1,"column":8,"nodeType":"103","messageId":"104","endLine":1,"endColumn":12},{"ruleId":"101","severity":1,"message":"105","line":5,"column":8,"nodeType":"103","messageId":"104","endLine":5,"endColumn":19},{"ruleId":"101","severity":1,"message":"106","line":6,"column":21,"nodeType":"103","messageId":"104","endLine":6,"endColumn":29},{"ruleId":"101","severity":1,"message":"107","line":7,"column":20,"nodeType":"103","messageId":"104","endLine":7,"endColumn":31},{"ruleId":"101","severity":1,"message":"108","line":7,"column":33,"nodeType":"103","messageId":"104","endLine":7,"endColumn":42},{"ruleId":"101","severity":1,"message":"109","line":16,"column":9,"nodeType":"103","messageId":"104","endLine":16,"endColumn":17},{"ruleId":"101","severity":1,"message":"110","line":1,"column":8,"nodeType":"103","messageId":"104","endLine":1,"endColumn":14},{"ruleId":"101","severity":1,"message":"111","line":3,"column":8,"nodeType":"103","messageId":"104","endLine":3,"endColumn":17},{"ruleId":"101","severity":1,"message":"112","line":4,"column":8,"nodeType":"103","messageId":"104","endLine":4,"endColumn":17},{"ruleId":"113","severity":1,"message":"114","line":19,"column":28,"nodeType":"115","messageId":"116","endLine":19,"endColumn":30},{"ruleId":"113","severity":1,"message":"114","line":39,"column":24,"nodeType":"115","messageId":"116","endLine":39,"endColumn":26},{"ruleId":"113","severity":1,"message":"114","line":21,"column":27,"nodeType":"115","messageId":"116","endLine":21,"endColumn":29},{"ruleId":"113","severity":1,"message":"114","line":57,"column":27,"nodeType":"115","messageId":"116","endLine":57,"endColumn":29},{"ruleId":"113","severity":1,"message":"117","line":94,"column":42,"nodeType":"115","messageId":"116","endLine":94,"endColumn":44},{"ruleId":"101","severity":1,"message":"118","line":1,"column":37,"nodeType":"103","messageId":"104","endLine":1,"endColumn":43},{"ruleId":"101","severity":1,"message":"119","line":14,"column":12,"nodeType":"103","messageId":"104","endLine":14,"endColumn":26},{"ruleId":"101","severity":1,"message":"120","line":14,"column":28,"nodeType":"103","messageId":"104","endLine":14,"endColumn":45},{"ruleId":"101","severity":1,"message":"121","line":15,"column":12,"nodeType":"103","messageId":"104","endLine":15,"endColumn":21},{"ruleId":"101","severity":1,"message":"122","line":15,"column":23,"nodeType":"103","messageId":"104","endLine":15,"endColumn":35},{"ruleId":"123","severity":1,"message":"124","line":99,"column":8,"nodeType":"125","endLine":99,"endColumn":113,"suggestions":"126"},{"ruleId":"101","severity":1,"message":"127","line":6,"column":12,"nodeType":"103","messageId":"104","endLine":6,"endColumn":19},{"ruleId":"101","severity":1,"message":"118","line":1,"column":37,"nodeType":"103","messageId":"104","endLine":1,"endColumn":43},{"ruleId":"123","severity":1,"message":"128","line":178,"column":91,"nodeType":"125","endLine":178,"endColumn":98,"suggestions":"129"},{"ruleId":"101","severity":1,"message":"130","line":1,"column":26,"nodeType":"103","messageId":"104","endLine":1,"endColumn":35},{"ruleId":"101","severity":1,"message":"131","line":6,"column":12,"nodeType":"103","messageId":"104","endLine":6,"endColumn":32},{"ruleId":"101","severity":1,"message":"132","line":6,"column":34,"nodeType":"103","messageId":"104","endLine":6,"endColumn":57},{"ruleId":"101","severity":1,"message":"133","line":9,"column":12,"nodeType":"103","messageId":"104","endLine":9,"endColumn":26},{"ruleId":"101","severity":1,"message":"134","line":9,"column":28,"nodeType":"103","messageId":"104","endLine":9,"endColumn":45},{"ruleId":"101","severity":1,"message":"135","line":13,"column":12,"nodeType":"103","messageId":"104","endLine":13,"endColumn":24},{"ruleId":"101","severity":1,"message":"136","line":13,"column":26,"nodeType":"103","messageId":"104","endLine":13,"endColumn":41},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'GraphVisual' is defined but never used.","'useState' is defined but never used.","'BFSNoRepeat' is defined but never used.","'BFSRepeat' is defined but never used.","'vertices' is assigned a value but never used.","'Cycles' is defined but never used.","'Planarity' is defined but never used.","'SpanTrees' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'useRef' is defined but never used.","'isCreatingEdge' is assigned a value but never used.","'setIsCreatingEdge' is assigned a value but never used.","'neighbor1' is assigned a value but never used.","'setNeighbor1' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a duplicate dependency: 'props.bendPositions'. Either omit it or remove the dependency array.","ArrayExpression",["139"],"'bendPos' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'bendPositions'. Either include it or remove the dependency array.",["140"],"'useEffect' is defined but never used.","'isUpdatingProperties' is assigned a value but never used.","'setIsUpdatingProperties' is assigned a value but never used.","'prevProperties' is assigned a value but never used.","'setPrevProperties' is assigned a value but never used.","'graphOptions' is assigned a value but never used.","'setGraphOptions' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"141","fix":"142"},{"desc":"143","fix":"144"},"Update the dependencies array to be: [vertices, mouseIn, bendPositions, props.bendPositions, props.edges, props.vertices]",{"range":"145","text":"146"},"Update the dependencies array to be: [bendPositions, edges]",{"range":"147","text":"148"},[3563,3668],"[vertices, mouseIn, bendPositions, props.bendPositions, props.edges, props.vertices]",[4477,4484],"[bendPositions, edges]"]